{
  "version": 3,
  "file": "data.js",
  "sourceRoot": "/Users/Mamble/Work/Bills/callImitator/client/src",
  "sources": [
    "data.ts"
  ],
  "names": [
    "DataService",
    "DataService.constructor",
    "DataService.updateStatus",
    "DataService.createGroup",
    "DataService.returnItemFromScope",
    "DataService.createUser"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;YAOA;gBACiCA,+BAAOA;gBAKpCA;oBACIC,iBAAOA,CAACA;oBAFJA,mBAAcA,GAAUA,CAACA,CAACA;oBAG9BA,IAAIA,CAACA,KAAKA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;oBAClCA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,GAAGA;wBAClBA;4BACIA,IAAIA,EAAGA,KAAKA;4BACZA,EAAEA,EAAKA,KAAKA;yBACfA;wBACDA;4BACIA,IAAIA,EAAGA,QAAQA;4BACfA,EAAEA,EAAKA,QAAQA;yBAClBA;wBACDA;4BACIA,IAAIA,EAAGA,SAASA;4BAChBA,EAAEA,EAAKA,SAASA;yBACnBA;wBACDA;4BACIA,IAAIA,EAAGA,YAAYA;4BACnBA,EAAEA,EAAKA,WAAWA;yBACrBA;qBACJA,CAAAA;gBACLA,CAACA;gBACDD,qBAAqBA;gBACrBA,gCAAgCA;gBAChCA,GAAGA;gBACHA,EAAEA;gBACFA,0BAA0BA;gBAC1BA,gCAAgCA;gBAChCA,GAAGA;gBAEHA,kCAAYA,GAAZA,UAAaA,GAAOA;oBAChBE,GAAGA,CAACA,OAAOA,CAACA,UAACA,CAAKA;wBACdA,gCAAgCA;wBAChCA,iEAAiEA;wBACjEA,+BAA+BA;wBAC/BA,QAAQA;wBACRA,8BAA8BA;wBAC9BA,iCAAiCA;wBACjCA,yDAAyDA;wBACzDA,qDAAqDA;wBACrDA,oCAAoCA;wBACpCA,kBAAkBA;wBAClBA,yDAAyDA;wBACzDA,oDAAoDA;wBACpDA,oCAAoCA;wBACpCA,WAAWA;wBACXA,0CAA0CA;wBAC1CA,iCAAiCA;wBACjCA,sDAAsDA;wBACtDA,eAAeA;wBACfA,oCAAoCA;wBACpCA,2DAA2DA;wBAC3DA,eAAeA;wBACfA,aAAaA;wBACbA,SAASA;wBACTA,GAAGA;oBACPA,CAACA,CAACA,CAAAA;oBACFA,IAAIA,CAACA,KAAKA,CAACA,KAAKA,CAACA,OAAOA,CAACA,UAACA,CAAKA;wBAC3BA,GAAGA,CAACA,OAAOA,CAACA,UAACA,CAAKA;4BACdA,EAAEA,CAAAA,CAACA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,MAAMA,CAACA,CAAAA,CAACA;gCACjBA,CAACA,CAACA,MAAMA,CAACA,IAAIA,GAAUA,CAACA,CAACA,MAAMA,CAACA,IAAIA,CAACA;gCACrCA,CAACA,CAACA,MAAMA,CAACA,QAAQA,GAAMA,CAACA,CAACA,MAAMA,CAACA,QAAQA,CAACA;gCACzCA,CAACA,CAACA,MAAMA,CAACA,SAASA,GAAKA,CAACA,CAACA,MAAMA,CAACA,SAASA,CAACA;gCAC1CA,CAACA,CAACA,MAAMA,CAACA,SAASA,GAAKA,CAACA,CAACA,MAAMA,CAACA,SAASA,CAACA;gCAC1CA,CAACA,CAACA,MAAMA,CAACA,SAASA,GAAKA,CAACA,CAACA,MAAMA,CAACA,SAASA,CAACA;gCAC1CA,CAACA,CAACA,MAAMA,CAACA,OAAOA,GAAOA,CAACA,CAACA,MAAMA,CAACA,OAAOA,CAACA;gCACxCA,CAACA,CAACA,MAAMA,CAACA,QAAQA,GAAMA,CAACA,CAACA,MAAMA,CAACA,QAAQA,CAACA;4BAC7CA,CAACA;wBACLA,CAACA,CAACA,CAAAA;oBACNA,CAACA,CAACA,CAAAA;oBACFA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,EAAEA,CAACA;gBACxBA,CAACA;gBACDF,iCAAWA,GAAXA,UAAYA,KAASA;oBACjBG,0BAA0BA;gBAC9BA,CAACA;gBACDH,yCAAmBA,GAAnBA,UAAoBA,SAAgBA,EAACA,MAAaA;oBAC9CI,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,CAACA,MAAMA,CAACA,UAACA,CAACA;wBAClCA,EAAEA,CAAAA,CAACA,CAACA,CAACA,EAAEA,IAAIA,MAAMA,CAACA,CAACA,CAACA;4BAChBA,MAAMA,CAACA,IAAIA,CAACA;wBAChBA,CAACA;oBACLA,CAACA,CAACA,CAAAA;gBACNA,CAACA;gBACDJ,gCAAUA,GAAVA,UAAWA,IAAQA;oBACfK,8CAA8CA;oBAC9CA,0BAA0BA;oBAC1BA,wCAAwCA;oBACxCA,kCAAkCA;oBAClCA,8BAA8BA;oBAC9BA,iEAAiEA;oBACjEA,kDAAkDA;oBAClDA,8CAA8CA;oBAC9CA,gCAAgCA;oBAChCA,OAAOA;oBACPA,KAAKA;oBACLA,iBAAiBA;oBACjBA,iBAAiBA;oBACjBA,mBAAmBA;oBACnBA,gCAAgCA;oBAChCA,wCAAwCA;oBACxCA,IAAIA;oBACJA,6CAA6CA;oBAC7CA,mBAAmBA;oBACnBA,+BAA+BA;oBAC/BA,iCAAiCA;oBACjCA,kCAAkCA;oBAClCA,uCAAuCA;oBACvCA,SAASA;oBACTA,IAAIA;oBACJA,+BAA+BA;oBAC/BA,6BAA6BA;oBAC7BA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,EAAEA,CAACA;gBACxBA,CAACA;gBAnHDL;oBAACA,iBAAMA,CAACA,YAAYA,CAACA;;mBACbA,6BAAIA,UAAKA;gBAHrBA;oBAACA,kBAAOA;;gCAsHPA;gBAADA,kBAACA;YAADA,CAACA,AAtHD,EACiC,gBAAO,EAqHvC;YAtHD,qCAsHC,CAAA",
  "sourcesContent": [
    "import {Emitter} from \"common/events\";\n//import {User} from \"../models/user\";\n//import {Group} from \"../models/group\";\nimport {Cached} from \"common/decorators\";\nimport {Service} from \"mangular/annotate\";\nimport {Inject} from \"mangular/annotate\";\n\n@Service\nexport class DataService extends Emitter{\n    @Inject('$rootScope')\n    private root:any;\n    public scope:any;\n    private allOnlineUsers:number = 0;\n    constructor(){\n        super();\n        this.scope = this.root.$new(true);\n        this.scope.statuses = [\n            {\n                name : 'All',\n                id   : 'all'\n            },\n            {\n                name : 'Online',\n                id   : 'online'\n            },\n            {\n                name : 'Offline',\n                id   : 'offline'\n            },\n            {\n                name : 'Is Talking',\n                id   : 'istalking'\n            }\n        ]\n    }\n    //get users():User[]{\n    //    return <User[]>User.all();\n    //}\n    //\n    //getUser(id:string):User{\n    //    return <User>User.get(id);\n    //}\n\n    updateStatus(res:any){\n        res.forEach((s:any)=>{\n            //var user = this.getUser(s.id);\n            //var d = (s.status.isOnline == user.status.isOnline)?false:true;\n            //user.set('status', s.status);\n            //if(d){\n            //    user.groups.map(group=>{\n            //        if(s.status.isOnline) {\n            //            var onlineUsers = group.get('onlineUsers');\n            //            group.set('onlineUsers',onlineUsers+1);\n            //            this.allOnlineUsers++;\n            //        } else {\n            //            var onlineUsers = group.get('onlineUsers');\n            //            group.set('onlineUsers',onlineUsers-1)\n            //            this.allOnlineUsers--;\n            //        }\n            //        this.scope.groups.map((g:any)=>{\n            //            if(g.id == 'All') {\n            //                g.onlineUsers = this.allOnlineUsers;\n            //            }\n            //            if(g.id == group.id) {\n            //                g.onlineUsers = group.get('onlineUsers');\n            //            }\n            //        });\n            //    });\n            //}\n        })\n        this.scope.users.forEach((u:any)=>{\n            res.forEach((s:any)=>{\n                if(u.id == s.userId){\n                    u.status.type        = s.status.type;\n                    u.status.isOnline    = s.status.isOnline;\n                    u.status.isTalking   = s.status.isTalking;\n                    u.status.changedAt   = s.status.changedAt;\n                    u.status.talkingAt   = s.status.talkingAt;\n                    u.status.servers     = s.status.servers;\n                    u.status.stations    = s.status.stations;\n                }\n            })\n        })\n        this.scope.$apply();\n    }\n    createGroup(group:any):any {\n        //return Group.new(group);\n    }\n    returnItemFromScope(arrayName:string,itemId:string ) {\n        return this.scope[arrayName].filter((r)=>{\n            if(r.id == itemId) {\n                return true;\n            }\n        })\n    }\n    createUser(user:any){\n        //var user = User.new({id:user.id}).set(user);\n        //user.groups.map(group=>{\n        //    var gr  = this.createGroup(group);\n        //    var users = gr.get('users');\n        //    gr.set('users',users+1);\n        //    if(user.hasOwnProperty('status') && user.status.isOnline) {\n        //        var onlineUsers = gr.get('onlineUsers');\n        //        gr.set('onlineUsers',onlineUsers+1);\n        //        this.allOnlineUsers++;\n        //    }\n        //});\n        //var groups = [{\n        //    'id':'All',\n        //    'name':'All',\n        //    'users':User.all().length,\n        //    'onlineUsers': this.allOnlineUsers\n        //}]\n        //Group.all().forEach((r:any,index:number)=>{\n        //    groups.push({\n        //        'id'          : r.id,\n        //        'name'        : r.name,\n        //        'users'       : r.users,\n        //        'onlineUsers' : r.onlineUsers\n        //    });\n        //})\n        //this.scope.users = User.list;\n        //this.scope.groups = groups;\n        this.scope.$apply();\n    }\n}"
  ]
}